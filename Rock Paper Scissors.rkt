(define (rps human_throw)
  (let ((comp_throw (comp)))
    (cond
      ((not (member? human_throw '(rock paper scissors lizard Spock))) '(That was not a valid input!))
      ((and (equal? human_throw 'paper) (equal? comp_throw 'rock)) (se '(You won!....) human_throw 'covers comp_throw))
      ((and (equal? human_throw 'paper) (equal? comp_throw 'Spock)) (se '(You won!....) human_throw 'disproves comp_throw))
      ((and (equal? human_throw 'rock) (equal? comp_throw 'scissors)) (se '(You won!....) human_throw 'smashes comp_throw))
      ((and (equal? human_throw 'rock) (equal? comp_throw 'lizard)) (se '(You won!....) human_throw 'crushes comp_throw))
      ((and (equal? human_throw 'scissors) (equal? comp_throw 'paper)) (se '(You won!....) human_throw 'cuts comp_throw))
      ((and (equal? human_throw 'scissors) (equal? comp_throw 'lizard)) (se '(You won!....) human_throw 'decapitates comp_throw))
      ((and (equal? human_throw 'lizard) (equal? comp_throw 'paper)) (se '(You won!....) human_throw 'eats comp_throw))
      ((and (equal? human_throw 'lizard) (equal? comp_throw 'Spock)) (se '(You won!....) human_throw 'poisons comp_throw))
      ((and (equal? human_throw 'Spock) (equal? comp_throw 'scissors)) (se '(You won!....) human_throw 'smashes comp_throw))
      ((and (equal? human_throw 'Spock) (equal? comp_throw 'rock)) (se '(You won!....) human_throw 'vaporizes comp_throw))
      ((equal? human_throw comp_throw) '(You Tied...meh))
      (else (se '(You lost...) human_throw '( loses to ) comp_throw)))))

(define (comp)
  (let ((x (random 5)))
     (cond
       ((equal? x 0) 'rock)
       ((equal? x 1) 'paper)
       ((equal? x 2) 'scissors)
       ((equal? x 3) 'lizard)
       ((equal? x 4) 'Spock)
       (else '(this is not ok)))))

(rps 'rock)
(rps 'paper)
(rps 'scissors)
(rps 'lizard)
(rps 'Spock)
(rps 'potato)